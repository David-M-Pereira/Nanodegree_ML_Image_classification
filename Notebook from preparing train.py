{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'torch'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-4652ae0c2007>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moptim\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtorch\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptim\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mlr_scheduler\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'torch'"
     ]
    }
   ],
   "source": [
    "# imports\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import torch\n",
    "from torch import nn, optim\n",
    "from torch.optim import lr_scheduler\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import torchvision\n",
    "from torchvision import datasets, models, transforms\n",
    "from PIL import Image\n",
    "import requests \n",
    "import json\n",
    "import argparse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = 'flowers'\n",
    "train_dir = data_dir + '/train'\n",
    "valid_dir = data_dir + '/valid'\n",
    "test_dir = data_dir + '/test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define your transforms for the training, validation, and testing sets\n",
    "train_transforms = transforms.Compose([transforms.RandomRotation(30),\n",
    "                                       transforms.RandomResizedCrop(224),\n",
    "                                       transforms.RandomHorizontalFlip(),\n",
    "                                       transforms.ToTensor(),\n",
    "                                       transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                            [0.229, 0.224, 0.225])])\n",
    "\n",
    "test_transforms = transforms.Compose([transforms.Resize(256),\n",
    "                                      transforms.CenterCrop(224),\n",
    "                                      transforms.ToTensor(),\n",
    "                                      transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                           [0.229, 0.224, 0.225])])\n",
    "\n",
    "validation_transforms = transforms.Compose([transforms.Resize(256),\n",
    "                                            transforms.CenterCrop(224),\n",
    "                                            transforms.ToTensor(),\n",
    "                                            transforms.Normalize([0.485, 0.456, 0.406], \n",
    "                                                                 [0.229, 0.224, 0.225])])\n",
    "\n",
    "# TODO: Load the datasets with ImageFolder\n",
    "train_image_datasets = datasets.ImageFolder(train_dir, transform=train_transforms)\n",
    "test_image_datasets = datasets.ImageFolder(test_dir, transform=test_transforms)\n",
    "valid_image_datasets = datasets.ImageFolder(valid_dir, transform=validation_transforms)\n",
    "\n",
    "# TODO: Using the image datasets and the trainforms, define the dataloaders\n",
    "train_dataloaders = torch.utils.data.DataLoader(train_image_datasets, batch_size = 64, shuffle=True)\n",
    "test_dataloaders = torch.utils.data.DataLoader(test_image_datasets, batch_size = 64, shuffle=True)\n",
    "valid_dataloaders = torch.utils.data.DataLoader(valid_image_datasets, batch_size = 64, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in order to have more than one model to chose from:\n",
    "\n",
    "architectures = {\"vgg16\":25088,\n",
    "              \"densenet121\" : 1024,}\n",
    "\n",
    "def nn_setup(architecture='vgg16',dropout=0.5, hidden_layer1 = 4000,lr = 0.001):\n",
    "    \n",
    "    \n",
    "    if architecture == 'vgg16':\n",
    "        model = models.vgg16(pretrained=True)        \n",
    "    elif architecture == 'densenet121':\n",
    "        model = models.densenet121(pretrained=True)\n",
    "    else:\n",
    "        print(\"Please choose a valid model\")\n",
    "        \n",
    "    \n",
    "        \n",
    "    for param in model.parameters():\n",
    "        param.requires_grad = False\n",
    "\n",
    "    from collections import OrderedDict\n",
    "        \n",
    "    classifier = nn.Sequential(OrderedDict([\n",
    "            ('dropout',nn.Dropout(dropout)),\n",
    "            ('inputs', nn.Linear(architectures[architecture], hidden_layer1)),\n",
    "            ('relu1', nn.ReLU()),\n",
    "            ('hidden_layer1', nn.Linear(hidden_layer1, 800)),\n",
    "            ('relu2',nn.ReLU()),\n",
    "            ('hidden_layer2',nn.Linear(800,200)),\n",
    "            ('relu3',nn.ReLU()),\n",
    "            ('hidden_layer3',nn.Linear(200,102)),\n",
    "            ('output', nn.LogSoftmax(dim=1))\n",
    "                          ]))\n",
    "        \n",
    "        \n",
    "    model.classifier = classifier\n",
    "    criterion = nn.NLLLoss()\n",
    "    optimizer = optim.Adam(model.classifier.parameters(), lr )\n",
    "    model.cuda()\n",
    "        \n",
    "    return model , optimizer ,criterion \n",
    "\n",
    "    \n",
    "\n",
    "model,optimizer,criterion = nn_setup('vgg16')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function for validation\n",
    "\n",
    "def validation(model, test_dataloaders, criterion, device):\n",
    "    test_loss = 0\n",
    "    accuracy = 0\n",
    "    for images, labels in test_dataloaders:\n",
    "        \n",
    "        images, labels = images.to(device), labels.to(device)\n",
    "\n",
    "        output = model.forward(images)\n",
    "        test_loss += criterion(output, labels).item()\n",
    "\n",
    "        ps = torch.exp(output)\n",
    "        equality = (labels.data == ps.max(dim=1)[1])\n",
    "        accuracy += equality.type(torch.FloatTensor).mean()\n",
    "    \n",
    "    return test_loss, accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For DL purposes\n",
    "\n",
    "def deep_learning(model, train_dataloaders, test_dataloaders, epochs, print_all, criterion, optimizer, device='cpu'):\n",
    "    epochs = epochs\n",
    "    print_all = print_all\n",
    "    steps = 0\n",
    "    \n",
    "    if device == 'gpu':\n",
    "        device = 'cuda'\n",
    "    model.to(device)\n",
    "    \n",
    "    for e in range(epochs):\n",
    "        running_loss = 0\n",
    "    for ii, (inputs, labels) in enumerate(train_dataloaders):\n",
    "        steps += 1\n",
    "    \n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "    \n",
    " \n",
    " # Forward/backward steps\n",
    "        outputs = model.forward(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "        running_loss += loss.item()\n",
    "    \n",
    "        if steps % print_all ==0:\n",
    "            model.eval()\n",
    "        \n",
    "            with torch.no_grad():\n",
    "                test_loss, accuracy = validation(model, test_dataloaders, criterion, device)\n",
    "            \n",
    "            print(\"Epoch: {}/{}.. \".format(e+1, epochs),\n",
    "                      \"Training Loss: {:.3f}.. \".format(running_loss/print_all),\n",
    "                      \"Test Loss: {:.3f}.. \".format(test_loss/len(test_dataloaders)),\n",
    "                      \"Test Accuracy: {:.3f}\".format(accuracy/len(test_dataloaders)))\n",
    "        \n",
    "        running_loss = 0\n",
    "                \n",
    "        # Training is back on\n",
    "        model.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    # 1\n",
    "    test_loaders=False\n",
    "\n",
    "    # Arguments\n",
    "    parser = argparse.ArgumentParser(description='Train a network given a dataset')\n",
    "\n",
    "    parser.add_argument('data_dir', type=str, \\\n",
    "        help='Path of the Image Dataset (includes train, valid and test folders)')\n",
    "    parser.add_argument('--save_dir', type=str, \\\n",
    "        help='Where to save checkpoints?')\n",
    "    parser.add_argument('--architecture', type=str, \\\n",
    "        help='Models architeture. Default is vgg16. Densenet121 also available https://pytorch.org/docs/master/torchvision/models.html')\n",
    "    parser.add_argument('--lr', type=float, \\\n",
    "        help='Learning rate. Default is 0.001')\n",
    "    parser.add_argument('--hidden_layer1', type=int, \\\n",
    "        help='Hidden units. Default is 4000')\n",
    "    parser.add_argument('--epochs', type=int, \\\n",
    "        help='Number of epochs. Default is 10')\n",
    "    parser.add_argument('--gpu', action='store_true', \\\n",
    "        help='for inference, use GPU if available')\n",
    "    parser.add_argument('--save_all', type=int, \\\n",
    "        help='Number of steps to save the checkpoint. Default is 5')\n",
    "    \n",
    "    args, _ = parser.parse_known_args()\n",
    "\n",
    "    data_dir = args.data_dir\n",
    "\n",
    "    save_dir = './'\n",
    "    if args.save_dir:\n",
    "        save_dir = args.save_dir\n",
    "\n",
    "    architecture = 'vgg16'\n",
    "    if args.architecture:\n",
    "        architecture = args.architecture\n",
    "\n",
    "    lr = 0.001\n",
    "    if args.lr:\n",
    "        lr = args.lr\n",
    "\n",
    "    hidden_units = 4000\n",
    "    if args.hidden_layer1:\n",
    "        hidden_layer1 = args.hidden_layer1\n",
    "\n",
    "    epochs = 10\n",
    "    if args.epochs:\n",
    "        epochs = args.epochs\n",
    "\n",
    "    save_all = 5\n",
    "    if args.save_all:\n",
    "        save_all = args.save_all\n",
    "\n",
    "\n",
    "\n",
    "    # Test loaders\n",
    "    if test_dataloaders:\n",
    "        images, labels = next(iter(train_dataloaders))\n",
    "        imshow(images[2])\n",
    "        plt.show()\n",
    "\n",
    "        images, labels = next(iter(valid_dataloaders))\n",
    "        imshow(images[2])\n",
    "        plt.show()\n",
    "\n",
    "        images, labels = next(iter(test_dataloaders))\n",
    "        imshow(images[2])\n",
    "        plt.show()\n",
    "\n",
    "    deep_learning(model=architecture, train_dataloaders, test_dataloaders, epochs=epochs, print_all=print_all, criterion=criterion, optimizer=optimizer, device=device,      learning_rate=learning_rate, cuda=cuda, epochs=epochs)\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
